/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 5000.0;
	SIMULATION_TIME = 5000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

USER_TYPE("|main_part|decoder_dig:inst|state_ps")
{
	VALUES = "state_ps.start_bit", "state_ps.bits", "state_ps.stop_bit";
}

SIGNAL("clk100")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("test")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("decoder_dig:inst|bitn[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|bitn";
}

SIGNAL("decoder_dig:inst|bitn[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|bitn";
}

SIGNAL("decoder_dig:inst|bitn[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|bitn";
}

SIGNAL("decoder_dig:inst|bitn[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|bitn";
}

SIGNAL("decoder_dig:inst|bitn[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|bitn";
}

SIGNAL("decoder_dig:inst|reg")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 16;
	LSB_INDEX = 0;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("decoder_dig:inst|reg[15]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[14]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[13]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[12]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

SIGNAL("decoder_dig:inst|reg[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "decoder_dig:inst|reg";
}

GROUP("decoder_dig:inst|bitn")
{
	MEMBERS = "decoder_dig:inst|bitn[4]", "decoder_dig:inst|bitn[3]", "decoder_dig:inst|bitn[2]", "decoder_dig:inst|bitn[1]", "decoder_dig:inst|bitn[0]";
}

TRANSITION_LIST("clk100")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 250;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("test")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 16.037;
		NODE
		{
			REPEAT = 124;
			LEVEL 1 FOR 20.032;
			LEVEL 0 FOR 19.968;
		}
		LEVEL 1 FOR 20.032;
		LEVEL 0 FOR 3.931;
	}
}

TRANSITION_LIST("out")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 397.135;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 99.985;
			LEVEL 0 FOR 540.015;
		}
		LEVEL 1 FOR 99.985;
		LEVEL 0 FOR 22.88;
	}
}

TRANSITION_LIST("decoder_dig:inst|bitn[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 312.669;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 320.0;
			LEVEL 0 FOR 320.0;
		}
		LEVEL 1 FOR 207.331;
	}
}

TRANSITION_LIST("decoder_dig:inst|bitn[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 152.668;
		NODE
		{
			REPEAT = 15;
			LEVEL 1 FOR 160.0;
			LEVEL 0 FOR 160.0;
		}
		LEVEL 1 FOR 47.332;
	}
}

TRANSITION_LIST("decoder_dig:inst|bitn[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 72.668;
		NODE
		{
			REPEAT = 30;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 47.332;
	}
}

TRANSITION_LIST("decoder_dig:inst|bitn[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 32.668;
		NODE
		{
			REPEAT = 62;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 7.332;
	}
}

TRANSITION_LIST("decoder_dig:inst|bitn[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 12.669;
		NODE
		{
			REPEAT = 124;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 7.331;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[15]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[14]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[13]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[12]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[11]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[10]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("decoder_dig:inst|reg[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk100";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "test";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|bitn";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
	CHILDREN = 4, 5, 6, 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|bitn[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|bitn[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|bitn[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|bitn[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|bitn[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
	CHILDREN = 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[12]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[13]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[14]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "decoder_dig:inst|reg[15]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 9;
}

TIME_BAR
{
	TIME = 13675;
	MASTER = TRUE;
}
;
